/*
 * This file is used to show the inverse kinematics for the UR5 robot
 * The mathematics is described in 
 * "Inverse Kinematics for Industrial Robots using Conformal Geometric Algebra"
 * by A. Kleppe and O. Egeland
 *
 * Created by Adam Leon Kleppe
 */
DefVarsN3();
// UR5 Denavit-Hartenberg parameters
agilus_parameters = 
{
	d1 =  0.0892;
	a2 = -0.425;
	a3 = -0.39243;
	d4 =  0.109;
	d5 =  0.093;
	d6 =  0.082;
	param = 
		[[d1,0 ,Pi/2],
		 [0 ,a2,0],
		 [0 ,a3,0],
		 [d4,0 ,Pi/2],
		 [d5,0 ,-Pi/2],
		 [d6,0 ,0]]
}

// Base plane
:Base = e0^e1^e2^(100*einf);

// Set the configurations of the robot
set_configurations =
{
	k_ud = 2*(CheckBox("Elbow up/Down",0)-0.5);
	k_fn = 2*(CheckBox("Wrist flip/no flip",1)-0.5);
	k_lr = 2*(CheckBox("Wrist left/right",1)-0.5);
	
	k = [k_ud, k_fn, k_lr]
}

// Set the position of the end-effector
set_position =
{
	pos_x = Slider("X", -1, 1, 0.01, 0.48543);
	pos_y = Slider("Y", -1, 1, 0.01, -0.109);
	pos_z = Slider("Z", -1, 1, 0.01, 0.4322);
	
	VecE3(pos_x, pos_y, pos_z)
}

// Set the rotation of the end-effector
set_rotation = 
{
	roll = 	Slider("Roll", -Pi, Pi, 0.01, 0);
	pitch = Slider("Pitch", -Pi, Pi, 0.01, -Pi);
	yaw = 	Slider("Yaw", -Pi, Pi, 0.01, 0);
	
	Rx = Matrix([[1,0,0],[0,cos(roll),-sin(roll)],[0,sin(roll),cos(roll)]]);
	Ry = Matrix([[cos(pitch),0,sin(pitch)],[0,1,0],[-sin(pitch),0,cos(pitch)]]);
	Rz = Matrix([[cos(yaw),-sin(yaw),0],[sin(yaw),cos(yaw),0],[0,0,1]]);
	R = Rz*Ry*Rx;
	n_e = VecE3(R(1,1),R(2,1),R(3,1));
	s_e = VecE3(R(1,2),R(2,2),R(3,2));
	a_e = VecE3(R(1,3),R(2,3),R(3,3));
	
	rot = [n_e, s_e, a_e]
}

// Calculate the inverse kinematics of the UR5 robot
ik_ur5 = 
{
	// Start of Section 5
	k = _P(1);
	p = _P(2);
	r = _P(3);
	param = ::agilus_parameters();

	X_0 = e0;
	X_e = VecN3(p);
	X_5 = VecN3(p - param(6)(1)*r(3));
	
	S_c = SphereN3(X_5, param(4)(1));
	K_0 = e0 - ((S_c*).e0)*einf;
	C_5k = S_c.K_0;
	Q_c = (X_5^e1^e2^einf).(C_5k*);
	X_c = (Q_c + k(3)*sqrt(abs(Q_c.Q_c)))/(-einf.Q_c);
	
	P_c = e0^e3^X_c^einf;
	
	// Section 5.1: Find X_3 and X_4
	P_cpar = (P_c*)+(X_5.(P_c*))*einf;
	P_56perp = ((X_5^X_e)*)^einf;
	n_56perp = -::normalize(P_56perp.e0.einf);
	P_cperp = X_5^n_56perp^einf;
	L_45 = P_cpar.P_cperp;
	
	S_5 = SphereN3(X_5,param(5)(1));
	Q_4 = (L_45*).S_5;
	X_4 = (Q_4 + k(2)*sqrt(abs(Q_4.Q_4)))/(-einf.Q_4);
	
	S_4 = SphereN3(X_4,param(4)(1));
	L_34 = X_4^(P_c*)^einf;
	Q_3 = (S_4*).L_34;
	X_3 = (Q_3 - k(3)*sqrt(abs(Q_3.Q_3)))/(-einf.Q_3);
	
	// Section 5.2: X_1 and X_2
	X_1 = VecN3(0,0,param(1)(1));
	S_1 = SphereN3(X_1, param(2)(2));
	S_3 = SphereN3(X_3, param(3)(2));
	C_2 = (S_1*)^(S_3*);
	Q_2 = C_2.P_c;
	X_2 = (Q_2 - k(1)*sqrt(abs(Q_2.Q_2)))/(-einf.Q_2);
	
	X = [X_0,X_1,X_2,X_3,X_4,X_5,X_e]
}

// Find the angles of the UR5
// These are calculated using Table 4
find_angles = 
{
	k = _P(1);
	p = _P(2);
	r = _P(3);
	X = _P(4);
	
	P_c = ::normalize(e0^e3^X(4)^einf);
	L_01 = X(1)^X(2)^einf;
	L_12  = X(2)^X(3)^einf;
	L_23 = X(3)^X(4)^einf;
	L_45 = X(5)^X(6)^einf;
	
	a_1 = e2;
	b_1 = -k(3)*P_c*;
	N_1 = e1^e2;
	theta_1 = ::atan2(a_1.b_1, (a_1^b_1)/N_1);
	
	a_2 = (L_01.e0).einf;
	b_2 = (L_12.e0).einf;
	N_2 = ::normalize(-k(3)*(P_c.e0).einf);
	theta_2 = ::atan2(a_2.b_2, (a_2^b_2)/N_2) - (Pi/2);
	
	a_3 = b_2;
	b_3 = (L_23.e0).einf;
	N_3 = N_2;
	theta_3 = ::atan2(a_3.b_3, (a_3^b_3)/N_3);
	
	a_4 = b_3;
	b_4 = (L_45.e0).einf;
	N_4 = N_2;
	theta_4 = ::atan2(a_4.b_4, (a_4^b_4)/N_4) - (Pi/2);
	
	a_5 = k(3)*P_c*;
	b_5 = (((VecN3(r(3))-e0)^einf).e0);
	N_5 = ::normalize(-((L_45*)^einf).e0);
	theta_5 = ::atan2(a_5.b_5, (a_5^b_5)/N_5);

	a_6 = (L_45.einf).e0;
	b_6 = (((VecN3(r(2))-e0)^einf).e0);
	N_6 = -(((VecN3(r(2))-e0)^einf).e0)^(((VecN3(r(1))-e0)^einf).e0);
	theta_6 = ::atan2(a_6.b_6, (a_6^b_6)/N_6);
	
	theta = [theta_1, theta_2, theta_3, theta_4, theta_5, theta_6]
}

// Normalize a multivector
normalize = 
{
	_P(1)/(sqrt(abs(_P(1)*_P(1)~)))
}

// Atan2 function 
atan2 = 
{
	y = _P(2);
	x = _P(1);
	angle = 0;
	if(x > 0){
		angle = atan(y/x);
	}
	else if(x < 0 && y >= 0){
		angle = atan(y/x) + 3.1415;
	}
	else if(x < 0 && y < 0){
		angle = atan(y/x) - 3.1415;
	}
	else if(x == 0 && y > 0){
		angle = Pi/2;
	}
	else if(x == 0 && y < 0){
		angle = -Pi/2;
	}
	angle
}

// Forward kinematics
forward_kinematics = 
{
	theta = _P(1);
	param = ::agilus_parameters();
	T01 = ::LinkDH2T([param(1)(2),param(1)(3),param(1)(1), theta(1)]);
	T12 = ::LinkDH2T([param(2)(2),param(2)(3),param(2)(1), theta(2)]);
	T23 = ::LinkDH2T([param(3)(2),param(3)(3),param(3)(1), theta(3)]);
	T34 = ::LinkDH2T([param(4)(2),param(4)(3),param(4)(1), theta(4)]);
	T45 = ::LinkDH2T([param(5)(2),param(5)(3),param(5)(1), theta(5)]);
	T56 = ::LinkDH2T([param(6)(2),param(6)(3),param(6)(1), theta(6)]);
	T = T01*T12*T23*T34*T45*T56
}

// Link function for DH-table
LinkDH2T = 
{ 
	a = _P(1)(1); alpha = _P(1)(2); d = _P(1)(3); theta = _P(1)(4);
	T =  Matrix([
	[cos(theta),-sin(theta)*cos(alpha),sin(theta)*sin(alpha),a*cos(theta)],
	[sin(theta),cos(theta)*cos(alpha),-cos(theta)*sin(alpha),a*sin(theta)],
	[0,sin(alpha),cos(alpha),d],
	[0,0,0,1]])
}

// Draw the robot
draw_robot =
{
	:_P(1);
	:Color(1,0.5,0,0.5);
	count = Size(_P(1));
	radius = 0.008;
	i = 1;
	loop
	{
		if (i > count-1) break;
		br =_P(1)(i+1)-_P(1)(i);
		br = VecN3(br(2),br(3),br(4));
		DrawSphere(_P(1)(i+1),radius);
		DrawCylinder(_P(1)(i),br,radius);
		i = i + 1;
	}
}

// Here the script begins
k = set_configurations();
p = set_position();
r = set_rotation();

X = ik_ur5(k,p,r);
?theta = find_angles(k,p,r,X);
?T = forward_kinematics(theta);
draw_robot(X);